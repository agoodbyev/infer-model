// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.3.2102.1701 at 18:13 on 15 марта 2021 г..
	/// </remarks>
	public partial class Model0_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_numberOfIterations_vdouble__6_vdouble__7 has executed. Set this to false to force re-execution of Changed_numberOfIterations_vdouble__6_vdouble__7</summary>
		public bool Changed_numberOfIterations_vdouble__6_vdouble__7_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_vdouble__6_vdouble__7 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_vdouble__6_vdouble__7</summary>
		public bool Changed_numberOfIterationsDecreased_Init_vdouble__6_vdouble__7_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_vdouble__6_vdouble__7 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_vdouble__6_vdouble__7</summary>
		public bool Changed_numberOfIterationsDecreased_Init_vdouble__6_vdouble__7_isInitialised;
		/// <summary>True if Changed_vdouble__6 has executed. Set this to false to force re-execution of Changed_vdouble__6</summary>
		public bool Changed_vdouble__6_isDone;
		/// <summary>True if Changed_vdouble__7 has executed. Set this to false to force re-execution of Changed_vdouble__7</summary>
		public bool Changed_vdouble__7_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Message to marginal of 'staticSigma'</summary>
		public Gamma staticSigma_marginal_F;
		/// <summary>Message to marginal of 'vbool1'</summary>
		public Bernoulli vbool1_marginal_F;
		/// <summary>Field backing the vdouble__6 property</summary>
		private double[] Vdouble__6;
		/// <summary>Message to marginal of 'vdouble__6'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__6_marginal_F;
		/// <summary>Field backing the vdouble__7 property</summary>
		private double[] Vdouble__7;
		/// <summary>Message to marginal of 'vdouble__7'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__7_marginal_F;
		public Gaussian[] vxMean__0__rep_F;
		/// <summary>Message to marginal of 'vxMean'</summary>
		public Gaussian vxMean_marginal_F;
		public Gamma[] vxSigma__0__rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gamma&gt;</summary>
		public Gamma vxSigma__0__rep_B_toDef;
		public Gamma vxSigma_F;
		/// <summary>Message to marginal of 'vxSigma'</summary>
		public Gamma vxSigma_marginal_F;
		public Gaussian[] vyMean__0__rep_F;
		/// <summary>Message to marginal of 'vyMean'</summary>
		public Gaussian vyMean_marginal_F;
		public Gamma[] vySigma__0__rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gamma&gt;</summary>
		public Gamma vySigma__0__rep_B_toDef;
		public Gamma vySigma_F;
		/// <summary>Message to marginal of 'vySigma'</summary>
		public Gamma vySigma_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__6'</summary>
		public double[] vdouble__6
		{
			get {
				return this.Vdouble__6;
			}
			set {
				if ((value!=null)&&(value.Length!=10)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+10)+" was expected for variable \'vdouble__6\'");
				}
				this.Vdouble__6 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vdouble__6_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_vdouble__6_vdouble__7_isInitialised = false;
				this.Changed_numberOfIterations_vdouble__6_vdouble__7_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__7'</summary>
		public double[] vdouble__7
		{
			get {
				return this.Vdouble__7;
			}
			set {
				if ((value!=null)&&(value.Length!=10)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+10)+" was expected for variable \'vdouble__7\'");
				}
				this.Vdouble__7 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vdouble__7_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_vdouble__6_vdouble__7_isInitialised = false;
				this.Changed_numberOfIterations_vdouble__6_vdouble__7_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of numberOfIterations and vdouble__6 and vdouble__7</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterations_vdouble__6_vdouble__7(int numberOfIterations)
		{
			if (this.Changed_numberOfIterations_vdouble__6_vdouble__7_isDone) {
				return ;
			}
			Bernoulli vBernoulli1 = Bernoulli.Uniform();
			this.vbool1_marginal_F = Bernoulli.Uniform();
			Bernoulli[] vbool1_selector_uses_B;
			// Create array for 'vbool1_selector_uses' Backwards messages.
			vbool1_selector_uses_B = new Bernoulli[6];
			vbool1_selector_uses_B[5] = Bernoulli.Uniform();
			vbool1_selector_uses_B[4] = Bernoulli.Uniform();
			vbool1_selector_uses_B[3] = Bernoulli.Uniform();
			vbool1_selector_uses_B[2] = Bernoulli.Uniform();
			vbool1_selector_uses_B[1] = Bernoulli.Uniform();
			DistributionStructArray<Bernoulli,bool> vbool1_selector_cases_B;
			// Create array for 'vbool1_selector_cases' Backwards messages.
			vbool1_selector_cases_B = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _ind0 = 0; _ind0<2; _ind0++) {
				vbool1_selector_cases_B[_ind0] = Bernoulli.Uniform();
			}
			Bernoulli[] vbool1_selector_cases_0_uses_B;
			// Create array for 'vbool1_selector_cases_0_uses' Backwards messages.
			vbool1_selector_cases_0_uses_B = new Bernoulli[18];
			vbool1_selector_cases_0_uses_B[16] = Bernoulli.Uniform();
			vbool1_selector_cases_0_uses_B[14] = Bernoulli.Uniform();
			vbool1_selector_cases_0_uses_B[12] = Bernoulli.Uniform();
			vbool1_selector_cases_0_uses_B[11] = Bernoulli.Uniform();
			vbool1_selector_cases_0_uses_B[10] = Bernoulli.Uniform();
			vbool1_selector_cases_0_uses_B[9] = Bernoulli.Uniform();
			vbool1_selector_cases_0_uses_B[7] = Bernoulli.Uniform();
			vbool1_selector_cases_0_uses_B[5] = Bernoulli.Uniform();
			vbool1_selector_cases_0_uses_B[3] = Bernoulli.Uniform();
			vbool1_selector_cases_0_uses_B[2] = Bernoulli.Uniform();
			vbool1_selector_cases_0_uses_B[1] = Bernoulli.Uniform();
			vbool1_selector_cases_0_uses_B[0] = Bernoulli.Uniform();
			Gaussian vxMean_F = Gaussian.Uniform();
			Gaussian vxMean__0__rep_F_marginal;
			// Message to 'vxMean__0__rep' from Replicate factor
			vxMean__0__rep_F_marginal = ReplicateOp_Divide.MarginalInit<Gaussian>(vxMean_F);
			Gaussian vxMean__0__rep_B_toDef;
			// Message to 'vxMean__0__rep' from Replicate factor
			vxMean__0__rep_B_toDef = ReplicateOp_Divide.ToDefInit<Gaussian>(vxMean_F);
			// Message to 'vxMean' from GaussianFromMeanAndVariance factor
			vxMean_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(0.0, 100.0);
			Gamma vxSigma__0__rep_F_marginal;
			// Message to 'vxSigma__0__rep' from Replicate factor
			vxSigma__0__rep_F_marginal = ReplicateOp_Divide.MarginalInit<Gamma>(this.vxSigma_F);
			// Message to 'vxSigma' from Sample factor
			this.vxSigma_F = GammaFromShapeAndScaleOp.SampleAverageConditional(1.0, 1.0);
			Gamma[] vxSigma__0__rep_F;
			// Create array for 'vxSigma__0__rep' Forwards messages.
			vxSigma__0__rep_F = new Gamma[10];
			for(int index1 = 0; index1<10; index1++) {
				vxSigma__0__rep_F[index1] = Gamma.Uniform();
			}
			Gaussian[] vxMean__0__rep_B;
			// Create array for 'vxMean__0__rep' Backwards messages.
			vxMean__0__rep_B = new Gaussian[10];
			for(int index1 = 0; index1<10; index1++) {
				vxMean__0__rep_B[index1] = Gaussian.Uniform();
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				// Message to 'vxSigma__0__rep' from Replicate factor
				vxSigma__0__rep_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(this.vxSigma__0__rep_B_toDef, this.vxSigma_F, vxSigma__0__rep_F_marginal);
				for(int index1 = 0; index1<10; index1++) {
					// Message to 'vxSigma__0__rep' from Replicate factor
					vxSigma__0__rep_F[index1] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.vxSigma__0__rep_B[index1], vxSigma__0__rep_F_marginal, index1, vxSigma__0__rep_F[index1]);
					// Message to 'vxMean__0__rep' from Gaussian factor
					vxMean__0__rep_B[index1] = GaussianOp.MeanAverageConditional(this.Vdouble__6[index1], this.vxMean__0__rep_F[index1], vxSigma__0__rep_F[index1], this.vxSigma__0__rep_B[index1]);
				}
				// Message to 'vxMean__0__rep' from Replicate factor
				vxMean__0__rep_B_toDef = ReplicateOp_Divide.ToDef<Gaussian>(vxMean__0__rep_B, vxMean__0__rep_B_toDef);
				// Message to 'vxMean__0__rep' from Replicate factor
				vxMean__0__rep_F_marginal = ReplicateOp_Divide.Marginal<Gaussian>(vxMean__0__rep_B_toDef, vxMean_F, vxMean__0__rep_F_marginal);
				for(int index1 = 0; index1<10; index1++) {
					// Message to 'vxMean__0__rep' from Replicate factor
					this.vxMean__0__rep_F[index1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(vxMean__0__rep_B[index1], vxMean__0__rep_F_marginal, index1, this.vxMean__0__rep_F[index1]);
					// Message to 'vxSigma__0__rep' from Gaussian factor
					this.vxSigma__0__rep_B[index1] = GaussianOp.PrecisionAverageConditional(Gaussian.PointMass(this.Vdouble__6[index1]), this.vxMean__0__rep_F[index1], vxSigma__0__rep_F[index1]);
				}
				// Message to 'vxSigma__0__rep' from Replicate factor
				this.vxSigma__0__rep_B_toDef = ReplicateOp_Divide.ToDef<Gamma>(this.vxSigma__0__rep_B, this.vxSigma__0__rep_B_toDef);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			Bernoulli[] vbool1_selector_cases_0_rep_B;
			// Create array for 'vbool1_selector_cases_0_rep' Backwards messages.
			vbool1_selector_cases_0_rep_B = new Bernoulli[10];
			for(int index1 = 0; index1<10; index1++) {
				vbool1_selector_cases_0_rep_B[index1] = Bernoulli.Uniform();
				// Message to 'vbool1_selector_cases_0_rep' from Gaussian factor
				vbool1_selector_cases_0_rep_B[index1] = Bernoulli.FromLogOdds(GaussianOp.LogEvidenceRatio(this.Vdouble__6[index1], this.vxMean__0__rep_F[index1], vxSigma__0__rep_F[index1], this.vxSigma__0__rep_B[index1]));
			}
			vbool1_selector_cases_0_uses_B[4] = Bernoulli.Uniform();
			// Message to 'vbool1_selector_cases_0_uses' from Replicate factor
			vbool1_selector_cases_0_uses_B[4] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(vbool1_selector_cases_0_rep_B, vbool1_selector_cases_0_uses_B[4]);
			vbool1_selector_cases_0_uses_B[6] = Bernoulli.Uniform();
			// Message to 'vbool1_selector_cases_0_uses' from Replicate factor
			vbool1_selector_cases_0_uses_B[6] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gaussian>(vxMean__0__rep_B, vxMean_F, this.vxMean__0__rep_F));
			vbool1_selector_cases_0_uses_B[8] = Bernoulli.Uniform();
			// Message to 'vbool1_selector_cases_0_uses' from Replicate factor
			vbool1_selector_cases_0_uses_B[8] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gamma>(this.vxSigma__0__rep_B, this.vxSigma_F, vxSigma__0__rep_F));
			Gaussian vyMean_F = Gaussian.Uniform();
			Gaussian vyMean__0__rep_F_marginal;
			// Message to 'vyMean__0__rep' from Replicate factor
			vyMean__0__rep_F_marginal = ReplicateOp_Divide.MarginalInit<Gaussian>(vyMean_F);
			Gaussian vyMean__0__rep_B_toDef;
			// Message to 'vyMean__0__rep' from Replicate factor
			vyMean__0__rep_B_toDef = ReplicateOp_Divide.ToDefInit<Gaussian>(vyMean_F);
			// Message to 'vyMean' from GaussianFromMeanAndVariance factor
			vyMean_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(0.0, 100.0);
			Gamma vySigma__0__rep_F_marginal;
			// Message to 'vySigma__0__rep' from Replicate factor
			vySigma__0__rep_F_marginal = ReplicateOp_Divide.MarginalInit<Gamma>(this.vySigma_F);
			// Message to 'vySigma' from Sample factor
			this.vySigma_F = GammaFromShapeAndScaleOp.SampleAverageConditional(1.0, 1.0);
			Gamma[] vySigma__0__rep_F;
			// Create array for 'vySigma__0__rep' Forwards messages.
			vySigma__0__rep_F = new Gamma[10];
			for(int index1 = 0; index1<10; index1++) {
				vySigma__0__rep_F[index1] = Gamma.Uniform();
			}
			Gaussian[] vyMean__0__rep_B;
			// Create array for 'vyMean__0__rep' Backwards messages.
			vyMean__0__rep_B = new Gaussian[10];
			for(int index1 = 0; index1<10; index1++) {
				vyMean__0__rep_B[index1] = Gaussian.Uniform();
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				// Message to 'vySigma__0__rep' from Replicate factor
				vySigma__0__rep_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(this.vySigma__0__rep_B_toDef, this.vySigma_F, vySigma__0__rep_F_marginal);
				for(int index1 = 0; index1<10; index1++) {
					// Message to 'vySigma__0__rep' from Replicate factor
					vySigma__0__rep_F[index1] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.vySigma__0__rep_B[index1], vySigma__0__rep_F_marginal, index1, vySigma__0__rep_F[index1]);
					// Message to 'vyMean__0__rep' from Gaussian factor
					vyMean__0__rep_B[index1] = GaussianOp.MeanAverageConditional(this.Vdouble__7[index1], this.vyMean__0__rep_F[index1], vySigma__0__rep_F[index1], this.vySigma__0__rep_B[index1]);
				}
				// Message to 'vyMean__0__rep' from Replicate factor
				vyMean__0__rep_B_toDef = ReplicateOp_Divide.ToDef<Gaussian>(vyMean__0__rep_B, vyMean__0__rep_B_toDef);
				// Message to 'vyMean__0__rep' from Replicate factor
				vyMean__0__rep_F_marginal = ReplicateOp_Divide.Marginal<Gaussian>(vyMean__0__rep_B_toDef, vyMean_F, vyMean__0__rep_F_marginal);
				for(int index1 = 0; index1<10; index1++) {
					// Message to 'vyMean__0__rep' from Replicate factor
					this.vyMean__0__rep_F[index1] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(vyMean__0__rep_B[index1], vyMean__0__rep_F_marginal, index1, this.vyMean__0__rep_F[index1]);
					// Message to 'vySigma__0__rep' from Gaussian factor
					this.vySigma__0__rep_B[index1] = GaussianOp.PrecisionAverageConditional(Gaussian.PointMass(this.Vdouble__7[index1]), this.vyMean__0__rep_F[index1], vySigma__0__rep_F[index1]);
				}
				// Message to 'vySigma__0__rep' from Replicate factor
				this.vySigma__0__rep_B_toDef = ReplicateOp_Divide.ToDef<Gamma>(this.vySigma__0__rep_B, this.vySigma__0__rep_B_toDef);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			Bernoulli[] vbool1_selector_cases_0_rep2_B;
			// Create array for 'vbool1_selector_cases_0_rep2' Backwards messages.
			vbool1_selector_cases_0_rep2_B = new Bernoulli[10];
			for(int index1 = 0; index1<10; index1++) {
				vbool1_selector_cases_0_rep2_B[index1] = Bernoulli.Uniform();
				// Message to 'vbool1_selector_cases_0_rep2' from Gaussian factor
				vbool1_selector_cases_0_rep2_B[index1] = Bernoulli.FromLogOdds(GaussianOp.LogEvidenceRatio(this.Vdouble__7[index1], this.vyMean__0__rep_F[index1], vySigma__0__rep_F[index1], this.vySigma__0__rep_B[index1]));
			}
			vbool1_selector_cases_0_uses_B[13] = Bernoulli.Uniform();
			// Message to 'vbool1_selector_cases_0_uses' from Replicate factor
			vbool1_selector_cases_0_uses_B[13] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(vbool1_selector_cases_0_rep2_B, vbool1_selector_cases_0_uses_B[13]);
			vbool1_selector_cases_0_uses_B[15] = Bernoulli.Uniform();
			// Message to 'vbool1_selector_cases_0_uses' from Replicate factor
			vbool1_selector_cases_0_uses_B[15] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gaussian>(vyMean__0__rep_B, vyMean_F, this.vyMean__0__rep_F));
			vbool1_selector_cases_0_uses_B[17] = Bernoulli.Uniform();
			// Message to 'vbool1_selector_cases_0_uses' from Replicate factor
			vbool1_selector_cases_0_uses_B[17] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gamma>(this.vySigma__0__rep_B, this.vySigma_F, vySigma__0__rep_F));
			Bernoulli vbool1_selector_cases_0_B = Bernoulli.Uniform();
			// Message to 'vbool1_selector_cases_0' from Replicate factor
			vbool1_selector_cases_0_B = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(vbool1_selector_cases_0_uses_B, vbool1_selector_cases_0_B);
			// Message to 'vbool1_selector_cases' from Copy factor
			vbool1_selector_cases_B[0] = ArrayHelper.SetTo<Bernoulli>(vbool1_selector_cases_B[0], vbool1_selector_cases_0_B);
			Bernoulli[] vbool1_selector_cases_1_uses_B;
			// Create array for 'vbool1_selector_cases_1_uses' Backwards messages.
			vbool1_selector_cases_1_uses_B = new Bernoulli[10];
			vbool1_selector_cases_1_uses_B[8] = Bernoulli.Uniform();
			vbool1_selector_cases_1_uses_B[5] = Bernoulli.Uniform();
			vbool1_selector_cases_1_uses_B[2] = Bernoulli.Uniform();
			vbool1_selector_cases_1_uses_B[1] = Bernoulli.Uniform();
			vbool1_selector_cases_1_uses_B[0] = Bernoulli.Uniform();
			Gamma staticSigma_F = default(Gamma);
			// Message to 'staticSigma' from Sample factor
			staticSigma_F = GammaFromShapeAndScaleOp.SampleAverageConditional(1.0, 1.0);
			Gamma[] staticSigma__1__rep2_B;
			// Create array for 'staticSigma__1__rep2' Backwards messages.
			staticSigma__1__rep2_B = new Gamma[10];
			for(int index1 = 0; index1<10; index1++) {
				staticSigma__1__rep2_B[index1] = Gamma.Uniform();
				// Message to 'staticSigma__1__rep2' from Gaussian factor
				staticSigma__1__rep2_B[index1] = GaussianOpBase.PrecisionAverageConditional(this.Vdouble__7[index1], 0.0);
			}
			Gamma[] staticSigma__1__uses_F;
			// Create array for 'staticSigma__1__uses' Forwards messages.
			staticSigma__1__uses_F = new Gamma[2];
			staticSigma__1__uses_F[1] = Gamma.Uniform();
			Gamma staticSigma__1__rep2_B_toDef;
			// Message to 'staticSigma__1__rep2' from Replicate factor
			staticSigma__1__rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Gamma>(staticSigma__1__uses_F[1]);
			// Message to 'staticSigma__1__rep2' from Replicate factor
			staticSigma__1__rep2_B_toDef = ReplicateOp_Divide.ToDef<Gamma>(staticSigma__1__rep2_B, staticSigma__1__rep2_B_toDef);
			Gamma[] staticSigma__1__uses_B;
			// Create array for 'staticSigma__1__uses' Backwards messages.
			staticSigma__1__uses_B = new Gamma[2];
			staticSigma__1__uses_B[1] = Gamma.Uniform();
			// Message to 'staticSigma__1__uses' from Replicate factor
			staticSigma__1__uses_B[1] = ArrayHelper.SetTo<Gamma>(staticSigma__1__uses_B[1], staticSigma__1__rep2_B_toDef);
			staticSigma__1__uses_F[0] = Gamma.Uniform();
			Gamma staticSigma__1__rep_F_marginal;
			// Message to 'staticSigma__1__rep' from Replicate factor
			staticSigma__1__rep_F_marginal = ReplicateOp_Divide.MarginalInit<Gamma>(staticSigma__1__uses_F[0]);
			Gamma staticSigma__1__rep_B_toDef;
			// Message to 'staticSigma__1__rep' from Replicate factor
			staticSigma__1__rep_B_toDef = ReplicateOp_Divide.ToDefInit<Gamma>(staticSigma__1__uses_F[0]);
			// Message to 'staticSigma__1__uses' from Replicate factor
			staticSigma__1__uses_F[0] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(staticSigma__1__uses_B, staticSigma_F, 0, staticSigma__1__uses_F[0]);
			Gamma[] staticSigma__1__rep_B;
			// Create array for 'staticSigma__1__rep' Backwards messages.
			staticSigma__1__rep_B = new Gamma[10];
			for(int index1 = 0; index1<10; index1++) {
				staticSigma__1__rep_B[index1] = Gamma.Uniform();
				// Message to 'staticSigma__1__rep' from Gaussian factor
				staticSigma__1__rep_B[index1] = GaussianOpBase.PrecisionAverageConditional(this.Vdouble__6[index1], 0.0);
			}
			// Message to 'staticSigma__1__rep' from Replicate factor
			staticSigma__1__rep_B_toDef = ReplicateOp_Divide.ToDef<Gamma>(staticSigma__1__rep_B, staticSigma__1__rep_B_toDef);
			staticSigma__1__uses_B[0] = Gamma.Uniform();
			// Message to 'staticSigma__1__uses' from Replicate factor
			staticSigma__1__uses_B[0] = ArrayHelper.SetTo<Gamma>(staticSigma__1__uses_B[0], staticSigma__1__rep_B_toDef);
			Gamma staticSigma__1__rep2_F_marginal;
			// Message to 'staticSigma__1__rep2' from Replicate factor
			staticSigma__1__rep2_F_marginal = ReplicateOp_Divide.MarginalInit<Gamma>(staticSigma__1__uses_F[1]);
			// Message to 'staticSigma__1__uses' from Replicate factor
			staticSigma__1__uses_F[1] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(staticSigma__1__uses_B, staticSigma_F, 1, staticSigma__1__uses_F[1]);
			vbool1_selector_cases_1_uses_B[3] = Bernoulli.Uniform();
			// Message to 'vbool1_selector_cases_1_uses' from Replicate factor
			vbool1_selector_cases_1_uses_B[3] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gamma>(staticSigma__1__uses_B, staticSigma_F, staticSigma__1__uses_F));
			// Message to 'staticSigma__1__rep' from Replicate factor
			staticSigma__1__rep_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(staticSigma__1__rep_B_toDef, staticSigma__1__uses_F[0], staticSigma__1__rep_F_marginal);
			Gamma[] staticSigma__1__rep_F;
			// Create array for 'staticSigma__1__rep' Forwards messages.
			staticSigma__1__rep_F = new Gamma[10];
			for(int index1 = 0; index1<10; index1++) {
				staticSigma__1__rep_F[index1] = Gamma.Uniform();
				// Message to 'staticSigma__1__rep' from Replicate factor
				staticSigma__1__rep_F[index1] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(staticSigma__1__rep_B[index1], staticSigma__1__rep_F_marginal, index1, staticSigma__1__rep_F[index1]);
			}
			Bernoulli[] vbool1_selector_cases_1_rep_B;
			// Create array for 'vbool1_selector_cases_1_rep' Backwards messages.
			vbool1_selector_cases_1_rep_B = new Bernoulli[10];
			for(int index1 = 0; index1<10; index1++) {
				vbool1_selector_cases_1_rep_B[index1] = Bernoulli.Uniform();
				// Message to 'vbool1_selector_cases_1_rep' from Gaussian factor
				vbool1_selector_cases_1_rep_B[index1] = Bernoulli.FromLogOdds(GaussianOpBase.LogEvidenceRatio(this.Vdouble__6[index1], 0.0, staticSigma__1__rep_F[index1]));
			}
			vbool1_selector_cases_1_uses_B[4] = Bernoulli.Uniform();
			// Message to 'vbool1_selector_cases_1_uses' from Replicate factor
			vbool1_selector_cases_1_uses_B[4] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(vbool1_selector_cases_1_rep_B, vbool1_selector_cases_1_uses_B[4]);
			vbool1_selector_cases_1_uses_B[6] = Bernoulli.Uniform();
			// Message to 'vbool1_selector_cases_1_uses' from Replicate factor
			vbool1_selector_cases_1_uses_B[6] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gamma>(staticSigma__1__rep_B, staticSigma__1__uses_F[0], staticSigma__1__rep_F));
			// Message to 'staticSigma__1__rep2' from Replicate factor
			staticSigma__1__rep2_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(staticSigma__1__rep2_B_toDef, staticSigma__1__uses_F[1], staticSigma__1__rep2_F_marginal);
			Gamma[] staticSigma__1__rep2_F;
			// Create array for 'staticSigma__1__rep2' Forwards messages.
			staticSigma__1__rep2_F = new Gamma[10];
			for(int index1 = 0; index1<10; index1++) {
				staticSigma__1__rep2_F[index1] = Gamma.Uniform();
				// Message to 'staticSigma__1__rep2' from Replicate factor
				staticSigma__1__rep2_F[index1] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(staticSigma__1__rep2_B[index1], staticSigma__1__rep2_F_marginal, index1, staticSigma__1__rep2_F[index1]);
			}
			Bernoulli[] vbool1_selector_cases_1_rep2_B;
			// Create array for 'vbool1_selector_cases_1_rep2' Backwards messages.
			vbool1_selector_cases_1_rep2_B = new Bernoulli[10];
			for(int index1 = 0; index1<10; index1++) {
				vbool1_selector_cases_1_rep2_B[index1] = Bernoulli.Uniform();
				// Message to 'vbool1_selector_cases_1_rep2' from Gaussian factor
				vbool1_selector_cases_1_rep2_B[index1] = Bernoulli.FromLogOdds(GaussianOpBase.LogEvidenceRatio(this.Vdouble__7[index1], 0.0, staticSigma__1__rep2_F[index1]));
			}
			vbool1_selector_cases_1_uses_B[7] = Bernoulli.Uniform();
			// Message to 'vbool1_selector_cases_1_uses' from Replicate factor
			vbool1_selector_cases_1_uses_B[7] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(vbool1_selector_cases_1_rep2_B, vbool1_selector_cases_1_uses_B[7]);
			vbool1_selector_cases_1_uses_B[9] = Bernoulli.Uniform();
			// Message to 'vbool1_selector_cases_1_uses' from Replicate factor
			vbool1_selector_cases_1_uses_B[9] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gamma>(staticSigma__1__rep2_B, staticSigma__1__uses_F[1], staticSigma__1__rep2_F));
			Bernoulli vbool1_selector_cases_1_B = Bernoulli.Uniform();
			// Message to 'vbool1_selector_cases_1' from Replicate factor
			vbool1_selector_cases_1_B = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(vbool1_selector_cases_1_uses_B, vbool1_selector_cases_1_B);
			// Message to 'vbool1_selector_cases' from Copy factor
			vbool1_selector_cases_B[1] = ArrayHelper.SetTo<Bernoulli>(vbool1_selector_cases_B[1], vbool1_selector_cases_1_B);
			vbool1_selector_uses_B[0] = Bernoulli.Uniform();
			// Message to 'vbool1_selector_uses' from Cases factor
			vbool1_selector_uses_B[0] = CasesOp.BAverageConditional(vbool1_selector_cases_B);
			Bernoulli vbool1_selector_uses_B_toDef;
			// Message to 'vbool1_selector_uses' from Replicate factor
			vbool1_selector_uses_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(vBernoulli1);
			// Message to 'vbool1_selector_uses' from Replicate factor
			vbool1_selector_uses_B_toDef = ReplicateOp_Divide.ToDef<Bernoulli>(vbool1_selector_uses_B, vbool1_selector_uses_B_toDef);
			// Message to 'vbool1_marginal' from Variable factor
			this.vbool1_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(vbool1_selector_uses_B_toDef, vBernoulli1, this.vbool1_marginal_F);
			this.vxMean_marginal_F = Gaussian.Uniform();
			Gaussian vxMean_use_B = Gaussian.Uniform();
			Bernoulli vbool1_selector_uses_F_marginal;
			// Message to 'vbool1_selector_uses' from Replicate factor
			vbool1_selector_uses_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(vBernoulli1);
			// Message to 'vbool1_selector_uses' from Replicate factor
			vbool1_selector_uses_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(vbool1_selector_uses_B_toDef, vBernoulli1, vbool1_selector_uses_F_marginal);
			Bernoulli[] vbool1_selector_uses_F;
			// Create array for 'vbool1_selector_uses' Forwards messages.
			vbool1_selector_uses_F = new Bernoulli[6];
			vbool1_selector_uses_F[1] = Bernoulli.Uniform();
			// Message to 'vbool1_selector_uses' from Replicate factor
			vbool1_selector_uses_F[1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(vbool1_selector_uses_B[1], vbool1_selector_uses_F_marginal, 1, vbool1_selector_uses_F[1]);
			Gaussian[] vxMean__B;
			// Create array for 'vxMean_' Backwards messages.
			vxMean__B = new Gaussian[1];
			for(int _gateind = 0; _gateind<1; _gateind++) {
				vxMean__B[_gateind] = Gaussian.Uniform();
			}
			// Message to 'vxMean_' from Copy factor
			vxMean__B[0] = ArrayHelper.SetTo<Gaussian>(vxMean__B[0], vxMean__0__rep_B_toDef);
			// Message to 'vxMean_use' from EnterPartial factor
			vxMean_use_B = GateEnterPartialOp<double>.ValueAverageConditional<Gaussian>(vxMean__B, vbool1_selector_uses_F[1], vxMean_F, new int[1] {0}, vxMean_use_B);
			// Message to 'vxMean_marginal' from Variable factor
			this.vxMean_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(vxMean_use_B, vxMean_F, this.vxMean_marginal_F);
			this.vxSigma_marginal_F = Gamma.Uniform();
			Gamma vxSigma_use_B = Gamma.Uniform();
			vbool1_selector_uses_F[2] = Bernoulli.Uniform();
			// Message to 'vbool1_selector_uses' from Replicate factor
			vbool1_selector_uses_F[2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(vbool1_selector_uses_B[2], vbool1_selector_uses_F_marginal, 2, vbool1_selector_uses_F[2]);
			Gamma[] vxSigma__B;
			// Create array for 'vxSigma_' Backwards messages.
			vxSigma__B = new Gamma[1];
			for(int _gateind2 = 0; _gateind2<1; _gateind2++) {
				vxSigma__B[_gateind2] = Gamma.Uniform();
			}
			// Message to 'vxSigma_' from Copy factor
			vxSigma__B[0] = ArrayHelper.SetTo<Gamma>(vxSigma__B[0], this.vxSigma__0__rep_B_toDef);
			// Message to 'vxSigma_use' from EnterPartial factor
			vxSigma_use_B = GateEnterPartialOp<double>.ValueAverageConditional<Gamma>(vxSigma__B, vbool1_selector_uses_F[2], this.vxSigma_F, new int[1] {0}, vxSigma_use_B);
			// Message to 'vxSigma_marginal' from Variable factor
			this.vxSigma_marginal_F = VariableOp.MarginalAverageConditional<Gamma>(vxSigma_use_B, this.vxSigma_F, this.vxSigma_marginal_F);
			this.vyMean_marginal_F = Gaussian.Uniform();
			Gaussian vyMean_use_B = Gaussian.Uniform();
			vbool1_selector_uses_F[3] = Bernoulli.Uniform();
			// Message to 'vbool1_selector_uses' from Replicate factor
			vbool1_selector_uses_F[3] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(vbool1_selector_uses_B[3], vbool1_selector_uses_F_marginal, 3, vbool1_selector_uses_F[3]);
			Gaussian[] vyMean__B;
			// Create array for 'vyMean_' Backwards messages.
			vyMean__B = new Gaussian[1];
			for(int _gateind3 = 0; _gateind3<1; _gateind3++) {
				vyMean__B[_gateind3] = Gaussian.Uniform();
			}
			// Message to 'vyMean_' from Copy factor
			vyMean__B[0] = ArrayHelper.SetTo<Gaussian>(vyMean__B[0], vyMean__0__rep_B_toDef);
			// Message to 'vyMean_use' from EnterPartial factor
			vyMean_use_B = GateEnterPartialOp<double>.ValueAverageConditional<Gaussian>(vyMean__B, vbool1_selector_uses_F[3], vyMean_F, new int[1] {0}, vyMean_use_B);
			// Message to 'vyMean_marginal' from Variable factor
			this.vyMean_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(vyMean_use_B, vyMean_F, this.vyMean_marginal_F);
			this.vySigma_marginal_F = Gamma.Uniform();
			Gamma vySigma_use_B = Gamma.Uniform();
			vbool1_selector_uses_F[4] = Bernoulli.Uniform();
			// Message to 'vbool1_selector_uses' from Replicate factor
			vbool1_selector_uses_F[4] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(vbool1_selector_uses_B[4], vbool1_selector_uses_F_marginal, 4, vbool1_selector_uses_F[4]);
			Gamma[] vySigma__B;
			// Create array for 'vySigma_' Backwards messages.
			vySigma__B = new Gamma[1];
			for(int _gateind4 = 0; _gateind4<1; _gateind4++) {
				vySigma__B[_gateind4] = Gamma.Uniform();
			}
			// Message to 'vySigma_' from Copy factor
			vySigma__B[0] = ArrayHelper.SetTo<Gamma>(vySigma__B[0], this.vySigma__0__rep_B_toDef);
			// Message to 'vySigma_use' from EnterPartial factor
			vySigma_use_B = GateEnterPartialOp<double>.ValueAverageConditional<Gamma>(vySigma__B, vbool1_selector_uses_F[4], this.vySigma_F, new int[1] {0}, vySigma_use_B);
			// Message to 'vySigma_marginal' from Variable factor
			this.vySigma_marginal_F = VariableOp.MarginalAverageConditional<Gamma>(vySigma_use_B, this.vySigma_F, this.vySigma_marginal_F);
			this.staticSigma_marginal_F = Gamma.Uniform();
			Gamma staticSigma_use_B = Gamma.Uniform();
			vbool1_selector_uses_F[5] = Bernoulli.Uniform();
			// Message to 'vbool1_selector_uses' from Replicate factor
			vbool1_selector_uses_F[5] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(vbool1_selector_uses_B[5], vbool1_selector_uses_F_marginal, 5, vbool1_selector_uses_F[5]);
			Gamma[] staticSigma__B;
			// Create array for 'staticSigma_' Backwards messages.
			staticSigma__B = new Gamma[1];
			for(int _gateind5 = 0; _gateind5<1; _gateind5++) {
				staticSigma__B[_gateind5] = Gamma.Uniform();
			}
			Gamma staticSigma__1__B = Gamma.Uniform();
			// Message to 'staticSigma__1_' from Replicate factor
			staticSigma__1__B = ReplicateOp_NoDivide.DefAverageConditional<Gamma>(staticSigma__1__uses_B, staticSigma__1__B);
			// Message to 'staticSigma_' from Copy factor
			staticSigma__B[0] = ArrayHelper.SetTo<Gamma>(staticSigma__B[0], staticSigma__1__B);
			// Message to 'staticSigma_use' from EnterPartial factor
			staticSigma_use_B = GateEnterPartialOp<double>.ValueAverageConditional<Gamma>(staticSigma__B, vbool1_selector_uses_F[5], staticSigma_F, new int[1] {1}, staticSigma_use_B);
			// Message to 'staticSigma_marginal' from Variable factor
			this.staticSigma_marginal_F = VariableOp.MarginalAverageConditional<Gamma>(staticSigma_use_B, staticSigma_F, this.staticSigma_marginal_F);
			this.Changed_numberOfIterations_vdouble__6_vdouble__7_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to vdouble__6 and vdouble__7</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_vdouble__6_vdouble__7(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_vdouble__6_vdouble__7_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_vdouble__6_vdouble__7_isInitialised)) {
				return ;
			}
			// Message to 'vxSigma__0__rep' from Replicate factor
			this.vxSigma__0__rep_B_toDef = ReplicateOp_Divide.ToDefInit<Gamma>(this.vxSigma_F);
			for(int index1 = 0; index1<10; index1++) {
				this.vxSigma__0__rep_B[index1] = Gamma.Uniform();
				this.vxMean__0__rep_F[index1] = Gaussian.Uniform();
			}
			// Message to 'vySigma__0__rep' from Replicate factor
			this.vySigma__0__rep_B_toDef = ReplicateOp_Divide.ToDefInit<Gamma>(this.vySigma_F);
			for(int index1 = 0; index1<10; index1++) {
				this.vySigma__0__rep_B[index1] = Gamma.Uniform();
				this.vyMean__0__rep_F[index1] = Gaussian.Uniform();
			}
			this.Changed_numberOfIterationsDecreased_Init_vdouble__6_vdouble__7_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_vdouble__6_vdouble__7_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__6</summary>
		private void Changed_vdouble__6()
		{
			if (this.Changed_vdouble__6_isDone) {
				return ;
			}
			// Create array for 'vdouble__6_marginal' Forwards messages.
			this.vdouble__6_marginal_F = new DistributionStructArray<Gaussian,double>(10);
			for(int index1 = 0; index1<10; index1++) {
				this.vdouble__6_marginal_F[index1] = Gaussian.Uniform();
			}
			// Message to 'vdouble__6_marginal' from DerivedVariable factor
			this.vdouble__6_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Vdouble__6, this.vdouble__6_marginal_F);
			this.Changed_vdouble__6_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__7</summary>
		private void Changed_vdouble__7()
		{
			if (this.Changed_vdouble__7_isDone) {
				return ;
			}
			// Create array for 'vdouble__7_marginal' Forwards messages.
			this.vdouble__7_marginal_F = new DistributionStructArray<Gaussian,double>(10);
			for(int index1 = 0; index1<10; index1++) {
				this.vdouble__7_marginal_F[index1] = Gaussian.Uniform();
			}
			// Message to 'vdouble__7_marginal' from DerivedVariable factor
			this.vdouble__7_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.Vdouble__7, this.vdouble__7_marginal_F);
			this.Changed_vdouble__7_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			this.vxSigma_F = Gamma.Uniform();
			// Create array for 'vxSigma__0__rep' Backwards messages.
			this.vxSigma__0__rep_B = new Gamma[10];
			// Create array for 'vxMean__0__rep' Forwards messages.
			this.vxMean__0__rep_F = new Gaussian[10];
			this.vySigma_F = Gamma.Uniform();
			// Create array for 'vySigma__0__rep' Backwards messages.
			this.vySigma__0__rep_B = new Gamma[10];
			// Create array for 'vyMean__0__rep' Forwards messages.
			this.vyMean__0__rep_F = new Gaussian[10];
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_Init_vdouble__6_vdouble__7_isDone = false;
				}
				this.Changed_numberOfIterations_vdouble__6_vdouble__7_isDone = false;
			}
			this.Changed_vdouble__7();
			this.Changed_vdouble__6();
			this.Constant();
			this.Changed_numberOfIterationsDecreased_Init_vdouble__6_vdouble__7(initialise);
			this.Changed_numberOfIterations_vdouble__6_vdouble__7(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vdouble__6") {
				return this.vdouble__6;
			}
			if (variableName=="vdouble__7") {
				return this.vdouble__7;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vdouble__7") {
				return this.Vdouble__7Marginal();
			}
			if (variableName=="vdouble__6") {
				return this.Vdouble__6Marginal();
			}
			if (variableName=="vbool1") {
				return this.Vbool1Marginal();
			}
			if (variableName=="vxMean") {
				return this.VxMeanMarginal();
			}
			if (variableName=="vxSigma") {
				return this.VxSigmaMarginal();
			}
			if (variableName=="vyMean") {
				return this.VyMeanMarginal();
			}
			if (variableName=="vySigma") {
				return this.VySigmaMarginal();
			}
			if (variableName=="staticSigma") {
				return this.StaticSigmaMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vdouble__6") {
				this.vdouble__6 = (double[])value;
				return ;
			}
			if (variableName=="vdouble__7") {
				this.vdouble__7 = (double[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'staticSigma' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gamma StaticSigmaMarginal()
		{
			return this.staticSigma_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool1Marginal()
		{
			return this.vbool1_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__6' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__6Marginal()
		{
			return this.vdouble__6_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__7' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__7Marginal()
		{
			return this.vdouble__7_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vxMean' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian VxMeanMarginal()
		{
			return this.vxMean_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vxSigma' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gamma VxSigmaMarginal()
		{
			return this.vxSigma_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vyMean' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian VyMeanMarginal()
		{
			return this.vyMean_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vySigma' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gamma VySigmaMarginal()
		{
			return this.vySigma_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
