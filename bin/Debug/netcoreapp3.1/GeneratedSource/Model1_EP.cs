// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.3.2102.1701 at 14:19 on 9 марта 2021 г..
	/// </remarks>
	public partial class Model1_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_x1 has executed. Set this to false to force re-execution of Changed_x1</summary>
		public bool Changed_x1_isDone;
		/// <summary>True if Changed_y1 has executed. Set this to false to force re-execution of Changed_y1</summary>
		public bool Changed_y1_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Message to marginal of 'vbool0'</summary>
		public Bernoulli vbool0_marginal_F;
		/// <summary>Message to marginal of 'vdouble26'</summary>
		public Gaussian vdouble26_marginal_F;
		/// <summary>Message to marginal of 'vdouble27'</summary>
		public Gaussian vdouble27_marginal_F;
		/// <summary>Field backing the x1 property</summary>
		private double X1;
		/// <summary>Message to marginal of 'x1'</summary>
		public Gaussian x1_marginal_F;
		/// <summary>Message to marginal of 'x2'</summary>
		public Gaussian x2_marginal_F;
		/// <summary>Field backing the y1 property</summary>
		private double Y1;
		/// <summary>Message to marginal of 'y1'</summary>
		public Gaussian y1_marginal_F;
		/// <summary>Message to marginal of 'y2'</summary>
		public Gaussian y2_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'x1'</summary>
		public double x1
		{
			get {
				return this.X1;
			}
			set {
				if (this.X1!=value) {
					this.X1 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_x1_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'y1'</summary>
		public double y1
		{
			get {
				return this.Y1;
			}
			set {
				if (this.Y1!=value) {
					this.Y1 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_y1_isDone = false;
				}
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of x1</summary>
		private void Changed_x1()
		{
			if (this.Changed_x1_isDone) {
				return ;
			}
			Gaussian x2_F = default(Gaussian);
			this.x2_marginal_F = Gaussian.Uniform();
			Gaussian x2_use_B = Gaussian.Uniform();
			// Message to 'x2' from GaussianFromMeanAndVariance factor
			x2_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(0.0, 100.0);
			// Message to 'x2_marginal' from Variable factor
			this.x2_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(x2_use_B, x2_F, this.x2_marginal_F);
			Gaussian vdouble26_F = default(Gaussian);
			this.vdouble26_marginal_F = Gaussian.Uniform();
			Gaussian vdouble26_use_B = Gaussian.Uniform();
			Gaussian[] vdouble26_uses_F;
			Gaussian[] vdouble26_uses_B;
			// Create array for 'vdouble26_uses' Forwards messages.
			vdouble26_uses_F = new Gaussian[2];
			// Create array for 'vdouble26_uses' Backwards messages.
			vdouble26_uses_B = new Gaussian[2];
			vdouble26_uses_B[1] = Gaussian.Uniform();
			vdouble26_uses_B[0] = Gaussian.Uniform();
			vdouble26_uses_F[1] = Gaussian.Uniform();
			vdouble26_uses_F[0] = Gaussian.Uniform();
			// Message to 'vdouble26' from Difference factor
			vdouble26_F = DoublePlusOp.AAverageConditional(x2_F, this.X1);
			// Message to 'vdouble26' from Copy factor
			vdouble26_F = Distribution.SetPoint<Gaussian,double>(vdouble26_F, Factor.Copy<double>(0.0));
			// FactorManager.Any(vdouble26_F, vdouble26_F) is now updated in all contexts
			// Message to 'vdouble26_uses' from Replicate factor
			vdouble26_uses_F[0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(vdouble26_uses_B, vdouble26_F, 0, vdouble26_uses_F[0]);
			// Message to 'vdouble26_uses' from Replicate factor
			vdouble26_uses_F[1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(vdouble26_uses_B, vdouble26_F, 1, vdouble26_uses_F[1]);
			// Message to 'vdouble26_uses' from Replicate factor
			vdouble26_uses_F[0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(vdouble26_uses_B, vdouble26_F, 0, vdouble26_uses_F[0]);
			// FactorManager.Any(vdouble26_uses_F[0], vdouble26_uses_F[0]) is now updated in all contexts
			// Message to 'vdouble26_marginal' from DerivedVariable factor
			this.vdouble26_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian>(vdouble26_use_B, vdouble26_uses_F[0], this.vdouble26_marginal_F);
			// Message to 'vdouble26_uses' from Replicate factor
			vdouble26_uses_F[1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(vdouble26_uses_B, vdouble26_F, 1, vdouble26_uses_F[1]);
			// FactorManager.Any(vdouble26_uses_F[1], vdouble26_uses_F[1]) is now updated in all contexts
			// Message to 'vdouble26_marginal' from DerivedVariable factor
			this.vdouble26_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian>(vdouble26_use_B, vdouble26_uses_F[1], this.vdouble26_marginal_F);
			this.x1_marginal_F = Gaussian.Uniform();
			// Message to 'x1_marginal' from DerivedVariable factor
			this.x1_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian,double>(this.X1, this.x1_marginal_F);
			// FactorManager.Any(vdouble26_marginal_F, vdouble26_marginal_F) is now updated in all contexts
			this.Changed_x1_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of y1</summary>
		private void Changed_y1()
		{
			if (this.Changed_y1_isDone) {
				return ;
			}
			Gaussian y2_F = default(Gaussian);
			this.y2_marginal_F = Gaussian.Uniform();
			Gaussian y2_use_B = Gaussian.Uniform();
			// Message to 'y2' from GaussianFromMeanAndVariance factor
			y2_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(0.0, 100.0);
			// Message to 'y2_marginal' from Variable factor
			this.y2_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(y2_use_B, y2_F, this.y2_marginal_F);
			Gaussian vdouble27_F = default(Gaussian);
			this.vdouble27_marginal_F = Gaussian.Uniform();
			Gaussian vdouble27_use_B = Gaussian.Uniform();
			Gaussian[] vdouble27_uses_F;
			Gaussian[] vdouble27_uses_B;
			// Create array for 'vdouble27_uses' Forwards messages.
			vdouble27_uses_F = new Gaussian[2];
			// Create array for 'vdouble27_uses' Backwards messages.
			vdouble27_uses_B = new Gaussian[2];
			vdouble27_uses_B[1] = Gaussian.Uniform();
			vdouble27_uses_B[0] = Gaussian.Uniform();
			vdouble27_uses_F[1] = Gaussian.Uniform();
			vdouble27_uses_F[0] = Gaussian.Uniform();
			// Message to 'vdouble27' from Difference factor
			vdouble27_F = DoublePlusOp.AAverageConditional(y2_F, this.Y1);
			// Message to 'vdouble27' from Copy factor
			vdouble27_F = Distribution.SetPoint<Gaussian,double>(vdouble27_F, Factor.Copy<double>(0.0));
			// FactorManager.Any(vdouble27_F, vdouble27_F) is now updated in all contexts
			// Message to 'vdouble27_uses' from Replicate factor
			vdouble27_uses_F[0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(vdouble27_uses_B, vdouble27_F, 0, vdouble27_uses_F[0]);
			// Message to 'vdouble27_uses' from Replicate factor
			vdouble27_uses_F[1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(vdouble27_uses_B, vdouble27_F, 1, vdouble27_uses_F[1]);
			// Message to 'vdouble27_uses' from Replicate factor
			vdouble27_uses_F[0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(vdouble27_uses_B, vdouble27_F, 0, vdouble27_uses_F[0]);
			// FactorManager.Any(vdouble27_uses_F[0], vdouble27_uses_F[0]) is now updated in all contexts
			// Message to 'vdouble27_marginal' from DerivedVariable factor
			this.vdouble27_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian>(vdouble27_use_B, vdouble27_uses_F[0], this.vdouble27_marginal_F);
			// Message to 'vdouble27_uses' from Replicate factor
			vdouble27_uses_F[1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(vdouble27_uses_B, vdouble27_F, 1, vdouble27_uses_F[1]);
			// FactorManager.Any(vdouble27_uses_F[1], vdouble27_uses_F[1]) is now updated in all contexts
			// Message to 'vdouble27_marginal' from DerivedVariable factor
			this.vdouble27_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian>(vdouble27_use_B, vdouble27_uses_F[1], this.vdouble27_marginal_F);
			this.y1_marginal_F = Gaussian.Uniform();
			// Message to 'y1_marginal' from DerivedVariable factor
			this.y1_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian,double>(this.Y1, this.y1_marginal_F);
			// FactorManager.Any(vdouble27_marginal_F, vdouble27_marginal_F) is now updated in all contexts
			this.Changed_y1_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			Bernoulli vBernoulli0 = Bernoulli.FromLogOdds(0.40546510810816422);
			this.vbool0_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool0_selector_uses_B_toDef;
			// Message to 'vbool0_selector_uses' from Replicate factor
			vbool0_selector_uses_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(vBernoulli0);
			// Message to 'vbool0_marginal' from Variable factor
			this.vbool0_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(vbool0_selector_uses_B_toDef, vBernoulli0, this.vbool0_marginal_F);
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			this.Constant();
			this.Changed_y1();
			this.Changed_x1();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="x1") {
				return this.x1;
			}
			if (variableName=="y1") {
				return this.y1;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vbool0") {
				return this.Vbool0Marginal();
			}
			if (variableName=="y1") {
				return this.Y1Marginal();
			}
			if (variableName=="y2") {
				return this.Y2Marginal();
			}
			if (variableName=="vdouble27") {
				return this.Vdouble27Marginal();
			}
			if (variableName=="x1") {
				return this.X1Marginal();
			}
			if (variableName=="x2") {
				return this.X2Marginal();
			}
			if (variableName=="vdouble26") {
				return this.Vdouble26Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="x1") {
				this.x1 = (double)value;
				return ;
			}
			if (variableName=="y1") {
				this.y1 = (double)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool0Marginal()
		{
			return this.vbool0_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble26' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble26Marginal()
		{
			return this.vdouble26_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble27' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble27Marginal()
		{
			return this.vdouble27_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'x1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian X1Marginal()
		{
			return this.x1_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'x2' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian X2Marginal()
		{
			return this.x2_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'y1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Y1Marginal()
		{
			return this.y1_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'y2' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Y2Marginal()
		{
			return this.y2_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
